// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package rat

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RatMetaData contains all meta data concerning the Rat contract.
var RatMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initContractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_defaultTokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_maxTokens\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_defaultMaxTokensPerWallet\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newOwnerTokens\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"oldOwnerTokens\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokenOwners\",\"type\":\"address[]\"}],\"name\":\"TokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMaxTokensPerWallet\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBurnedTokensByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTokensByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTokensPerWallet\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newContractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_defaultMaxTokensPerWallet\",\"type\":\"uint32\"}],\"name\":\"setDefaultMaxTokensPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setERC20Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newMax\",\"type\":\"uint32\"}],\"name\":\"setMaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"max\",\"type\":\"uint32\"}],\"name\":\"setMaxTokensForWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setMintingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"banned\",\"type\":\"bool\"}],\"name\":\"setWalletBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"storeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletBans\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60006008556658d15e17628000600955600a80546001600160481b0319166801000000010000006317905560e0604052603a60808181529062003aaf60a03980516200005491600b91602090910190620003a1565b506000600c5560405180606001604052806029815260200162003ae96029913980516200008a91601491602090910190620003a1565b503480156200009857600080fd5b5060405162003b1238038062003b12833981016040819052620000bb9162000546565b815182908290620000d4906000906020850190620003a1565b508051620000ea906001906020840190620003a1565b50505062000107620001016200034b60201b60201c565b6200034f565b856200011557600062000117565b855b600c558851620001ba576014805462000130906200064b565b80601f01602080910402602001604051908101604052809291908181526020018280546200015e906200064b565b8015620001af5780601f106200018357610100808354040283529160200191620001af565b820191906000526020600020905b8154815290600101906020018083116200019157829003601f168201915b5050505050620001bc565b885b8051620001d291601491602090910190620003a1565b50600a5463ffffffff1660641415620001f457600a5463ffffffff16620001f6565b845b600a805463ffffffff191663ffffffff929092169190911790558751620002b057600b805462000226906200064b565b80601f016020809104026020016040519081016040528092919081815260200182805462000254906200064b565b8015620002a55780601f106200027957610100808354040283529160200191620002a5565b820191906000526020600020905b8154815290600101906020018083116200028757829003601f168201915b5050505050620002b2565b875b8051620002c891600b91602090910190620003a1565b508363ffffffff1660011415620002f057600a54640100000000900463ffffffff16620002f2565b835b600a805463ffffffff929092166401000000000263ffffffff60201b1990921691909117905550506009555050601380546001600160a01b039093166001600160a01b0319909316929092179091555062000688915050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620003af906200064b565b90600052602060002090601f016020900481019282620003d357600085556200041e565b82601f10620003ee57805160ff19168380011785556200041e565b828001600101855582156200041e579182015b828111156200041e57825182559160200191906001019062000401565b506200042c92915062000430565b5090565b5b808211156200042c576000815560010162000431565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200046f57600080fd5b81516001600160401b03808211156200048c576200048c62000447565b604051601f8301601f19908116603f01168101908282118183101715620004b757620004b762000447565b81604052838152602092508683858801011115620004d457600080fd5b600091505b83821015620004f85785820183015181830184015290820190620004d9565b838211156200050a5760008385830101525b9695505050505050565b80516001600160a01b03811681146200052c57600080fd5b919050565b805163ffffffff811681146200052c57600080fd5b60008060008060008060008060006101208a8c0312156200056657600080fd5b89516001600160401b03808211156200057e57600080fd5b6200058c8d838e016200045d565b9a5060208c0151915080821115620005a357600080fd5b620005b18d838e016200045d565b9950620005c160408d0162000514565b985060608c01519750620005d860808d0162000531565b9650620005e860a08d0162000531565b955060c08c0151945060e08c01519150808211156200060657600080fd5b620006148d838e016200045d565b93506101008c01519150808211156200062c57600080fd5b506200063b8c828d016200045d565b9150509295985092959850929598565b600181811c908216806200066057607f821691505b602082108114156200068257634e487b7160e01b600052602260045260246000fd5b50919050565b61341780620006986000396000f3fe60806040526004361061025c5760003560e01c80637ece73a311610144578063c3fcbbe3116100b6578063e83157421161007a578063e831574214610723578063e8a3d48514610740578063e985e9c514610755578063eed670d714610775578063f2fde38b146107a5578063f8a14f46146107c557600080fd5b8063c3fcbbe314610654578063c87b56dd1461068e578063cafee7ee146106ae578063cd634be0146106ce578063d1b02ba71461070157600080fd5b8063963bfe1211610108578063963bfe12146105c15780639cbf9e36146105d6578063a22cb465146105de578063b88d4fde146105fe578063beb9716d1461061e578063c3f4f54f1461063f57600080fd5b80637ece73a3146105385780638da5cb5b146105585780638e499bcf14610576578063938e3d7b1461058c57806395d89b41146105ac57600080fd5b806341bec0d2116101dd5780636a92072b116101a15780636a92072b1461048357806370a08231146104a3578063715018a6146104c35780637420aa36146104d8578063785e9e86146104f85780637b47ec1a1461051857600080fd5b806341bec0d2146103e357806342842e0e1461040357806344a0d68a146104235780636352211e146104435780636558c5211461046357600080fd5b806313faede61161022457806313faede6146103325780631c348dd31461035657806322ad22a71461037657806323b872dd1461039657806340398d67146103b657600080fd5b806301ffc9a71461026157806306fdde0314610296578063081812fc146102b8578063095ea7b3146102f057806309bc18ad14610312575b600080fd5b34801561026d57600080fd5b5061028161027c366004612afd565b6107e5565b60405190151581526020015b60405180910390f35b3480156102a257600080fd5b506102ab610837565b60405161028d9190612b72565b3480156102c457600080fd5b506102d86102d3366004612b85565b6108c9565b6040516001600160a01b03909116815260200161028d565b3480156102fc57600080fd5b5061031061030b366004612bba565b610956565b005b34801561031e57600080fd5b5061031061032d366004612cbb565b610a6c565b34801561033e57600080fd5b5061034860095481565b60405190815260200161028d565b34801561036257600080fd5b50610348610371366004612b85565b610b12565b34801561038257600080fd5b50610310610391366004612d81565b610b33565b3480156103a257600080fd5b506103106103b1366004612dc8565b610b6b565b3480156103c257600080fd5b506103d66103d1366004612e04565b610b9c565b60405161028d9190612e1f565b3480156103ef57600080fd5b506103106103fe366004612e04565b610c08565b34801561040f57600080fd5b5061031061041e366004612dc8565b610c54565b34801561042f57600080fd5b5061031061043e366004612b85565b610c6f565b34801561044f57600080fd5b506102d861045e366004612b85565b610c9e565b34801561046f57600080fd5b5061031061047e366004612e63565b610d15565b34801561048f57600080fd5b5061031061049e366004612e63565b610d67565b3480156104af57600080fd5b506103486104be366004612e04565b610dc2565b3480156104cf57600080fd5b50610310610e49565b3480156104e457600080fd5b506103106104f3366004612e8c565b610e7f565b34801561050457600080fd5b506013546102d8906001600160a01b031681565b34801561052457600080fd5b50610310610533366004612b85565b610ec7565b34801561054457600080fd5b50610310610553366004612ea9565b61104b565b34801561056457600080fd5b506007546001600160a01b03166102d8565b34801561058257600080fd5b5061034860085481565b34801561059857600080fd5b506103106105a7366004612efb565b6110dc565b3480156105b857600080fd5b506102ab611119565b3480156105cd57600080fd5b506102ab611128565b6103106111b6565b3480156105ea57600080fd5b506103106105f9366004612f30565b6115cc565b34801561060a57600080fd5b50610310610619366004612f5c565b6115d7565b34801561062a57600080fd5b50600a5461028190600160401b900460ff1681565b34801561064b57600080fd5b506103d661160f565b34801561066057600080fd5b50600a5461067990640100000000900463ffffffff1681565b60405163ffffffff909116815260200161028d565b34801561069a57600080fd5b506102ab6106a9366004612b85565b611666565b3480156106ba57600080fd5b506103d66106c9366004612e04565b6117dd565b3480156106da57600080fd5b506106796106e9366004612e04565b60116020526000908152604090205463ffffffff1681565b34801561070d57600080fd5b50610716611847565b60405161028d9190612fd8565b34801561072f57600080fd5b50600a546106799063ffffffff1681565b34801561074c57600080fd5b506102ab6118a8565b34801561076157600080fd5b50610281610770366004613019565b6118b7565b34801561078157600080fd5b50610281610790366004612e04565b60126020526000908152604090205460ff1681565b3480156107b157600080fd5b506103106107c0366004612e04565b6118e5565b3480156107d157600080fd5b506102d86107e0366004612b85565b611980565b60006001600160e01b031982166380ac58cd60e01b148061081657506001600160e01b03198216635b5e139f60e01b145b8061083157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461084690613043565b80601f016020809104026020016040519081016040528092919081815260200182805461087290613043565b80156108bf5780601f10610894576101008083540402835291602001916108bf565b820191906000526020600020905b8154815290600101906020018083116108a257829003601f168201915b5050505050905090565b60006108d4826119aa565b61093a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061096182610c9e565b9050806001600160a01b0316836001600160a01b031614156109cf5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610931565b336001600160a01b03821614806109eb57506109eb81336118b7565b610a5d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610931565b610a6783836119c7565b505050565b6007546001600160a01b03163314610a965760405162461bcd60e51b81526004016109319061307e565b60005b8251811015610a67578160116000858481518110610ab957610ab96130b3565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055508080610b0a906130df565b915050610a99565b600e8181548110610b2257600080fd5b600091825260209091200154905081565b6007546001600160a01b03163314610b5d5760405162461bcd60e51b81526004016109319061307e565b610b678282611a35565b5050565b610b753382611ac0565b610b915760405162461bcd60e51b8152600401610931906130fa565b610a67838383611b82565b6001600160a01b0381166000908152600f6020908152604091829020805483518184028101840190945280845260609392830182828015610bfc57602002820191906000526020600020905b815481526020019060010190808311610be8575b50505050509050919050565b6007546001600160a01b03163314610c325760405162461bcd60e51b81526004016109319061307e565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b610a67838383604051806020016040528060008152506115d7565b6007546001600160a01b03163314610c995760405162461bcd60e51b81526004016109319061307e565b600955565b6000818152600260205260408120546001600160a01b0316806108315760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610931565b6007546001600160a01b03163314610d3f5760405162461bcd60e51b81526004016109319061307e565b600a805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b6007546001600160a01b03163314610d915760405162461bcd60e51b81526004016109319061307e565b600a805460085468ff00000000ffffffff1990911663ffffffff939093169283179211600160401b02919091179055565b60006001600160a01b038216610e2d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610931565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b03163314610e735760405162461bcd60e51b81526004016109319061307e565b610e7d6000611d2d565b565b6007546001600160a01b03163314610ea95760405162461bcd60e51b81526004016109319061307e565b600a8054911515600160401b0260ff60401b19909216919091179055565b33610ed182610c9e565b6001600160a01b03161480610ef35750610ef3610eed82610c9e565b336118b7565b610f3f5760405162461bcd60e51b815260206004820152601760248201527f596f7520646f206e6f74206f776e2074686973207261740000000000000000006044820152606401610931565b600033610f4b83610c9e565b6001600160a01b031614610f6757610f6282610c9e565b610f69565b335b9050610f7482611d7f565b610f7d81610dc2565b610f8a57610f8a81611dbf565b610f948183611ee9565b6001600160a01b03811660009081526010602090815260408220805460018181018355918452918320909101849055600e8054918201815582527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0183905560088054916110018361314b565b9091555050604080518381526001600160a01b03831660208201527f33631bcd0a4d34a7e2c240ab0753d5adfb7284d8ac89dab6876ec785c0cfa0e6910160405180910390a15050565b6007546001600160a01b031633146110755760405162461bcd60e51b81526004016109319061307e565b60005b8251811015610a67578160126000858481518110611098576110986130b3565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806110d4816130df565b915050611078565b6007546001600160a01b031633146111065760405162461bcd60e51b81526004016109319061307e565b8051610b67906014906020840190612a18565b60606001805461084690613043565b600b805461113590613043565b80601f016020809104026020016040519081016040528092919081815260200182805461116190613043565b80156111ae5780601f10611183576101008083540402835291602001916111ae565b820191906000526020600020905b81548152906001019060200180831161119157829003601f168201915b505050505081565b600a5460085463ffffffff9091161180156111da5750600a54600160401b900460ff165b6112265760405162461bcd60e51b815260206004820152601c60248201527f4d6178206e756d626572206f6620746f6b656e732072656163686564000000006044820152606401610931565b3360009081526012602052604090205460ff16156112865760405162461bcd60e51b815260206004820152601f60248201527f546869732077616c6c65742063616e6e6f74206d696e74206120746f6b656e006044820152606401610931565b600c546013546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156112d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f69190613162565b905060095481101561133e5760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b6044820152606401610931565b600061134933610dc2565b159050801561138557600a54336000908152601160205260409020805464010000000090920463ffffffff1663ffffffff199092169190911790555b3360008181526011602052604090205463ffffffff16906113a590610dc2565b10806113c457503360009081526011602052604090205463ffffffff16155b6114105760405162461bcd60e51b815260206004820152601d60248201527f4d617820746f6b656e73207265616368656420666f722077616c6c65740000006044820152606401610931565b61143d336114266007546001600160a01b031690565b6009546013546001600160a01b0316929190612059565b61144733846120b3565b6114db83600b805461145890613043565b80601f016020809104026020016040519081016040528092919081815260200182805461148490613043565b80156114d15780601f106114a6576101008083540402835291602001916114d1565b820191906000526020600020905b8154815290600101906020018083116114b457829003601f168201915b5050505050611a35565b801561152457600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b031916331790555b600c8054906000611534836130df565b909155505060088054906000611549836130df565b9091555050336000908152600f60209081526040808320805460018101825590845292829020909201859055600a805460085460ff60401b19821663ffffffff90921611600160401b0217905590518481527ff00d28232b285f24f2e38415deb2ceb31069e70d4505838b3911b4f02058502e91015b60405180910390a1505050565b610b673383836120cd565b6115e13383611ac0565b6115fd5760405162461bcd60e51b8152600401610931906130fa565b6116098484848461219c565b50505050565b6060600e8054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191906000526020600020905b815481526020019060010190808311611649575050505050905090565b6060611671826119aa565b6116d75760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610931565b600082815260066020526040812080546116f090613043565b80601f016020809104026020016040519081016040528092919081815260200182805461171c90613043565b80156117695780601f1061173e57610100808354040283529160200191611769565b820191906000526020600020905b81548152906001019060200180831161174c57829003601f168201915b50505050509050600061178760408051602081019091526000815290565b905080516000141561179a575092915050565b8151156117cc5780826040516020016117b492919061317b565b60405160208183030381529060405292505050919050565b6117d5846121cf565b949350505050565b6001600160a01b038116600090815260106020908152604091829020805483518184028101840190945280845260609392830182828015610bfc5760200282019190600052602060002090815481526020019060010190808311610be85750505050509050919050565b6060600d8054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611881575050505050905090565b60606014805461084690613043565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6007546001600160a01b0316331461190f5760405162461bcd60e51b81526004016109319061307e565b6001600160a01b0381166119745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610931565b61197d81611d2d565b50565b600d818154811061199057600080fd5b6000918252602090912001546001600160a01b0316905081565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119fc82610c9e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611a3e826119aa565b611aa15760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610931565b60008281526006602090815260409091208251610a6792840190612a18565b6000611acb826119aa565b611b2c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610931565b6000611b3783610c9e565b9050806001600160a01b0316846001600160a01b03161480611b725750836001600160a01b0316611b67846108c9565b6001600160a01b0316145b806117d557506117d581856118b7565b826001600160a01b0316611b9582610c9e565b6001600160a01b031614611bfd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610931565b6001600160a01b038216611c5f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610931565b611c6a8383836122a7565b611c756000826119c7565b6001600160a01b0383166000908152600360205260408120805460019290611c9e9084906131aa565b90915550506001600160a01b0382166000908152600360205260408120805460019290611ccc9084906131c1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d88816123c1565b60008181526006602052604090208054611da190613043565b15905061197d57600081815260066020526040812061197d91612a9c565b600d5460005b81811015610a6757826001600160a01b0316600d8281548110611dea57611dea6130b3565b6000918252602090912001546001600160a01b03161415611ed757611e106001836131aa565b811415611e4f57600d805480611e2857611e286131d9565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b600d611e5c6001846131aa565b81548110611e6c57611e6c6130b3565b600091825260209091200154600d80546001600160a01b039092169183908110611e9857611e986130b3565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600d805480611e2857611e286131d9565b80611ee1816130df565b915050611dc5565b6001600160a01b0382166000908152600f6020526040812054905b81811015611609576001600160a01b0384166000908152600f60205260409020805484919083908110611f3957611f396130b3565b9060005260206000200154141561204757611f556001836131aa565b811415611f9e576001600160a01b0384166000908152600f60205260409020805480611f8357611f836131d9565b60019003818190600052602060002001600090559055611609565b6001600160a01b0384166000908152600f60205260409020611fc16001846131aa565b81548110611fd157611fd16130b3565b9060005260206000200154600f6000866001600160a01b03166001600160a01b031681526020019081526020016000208281548110612012576120126130b3565b60009182526020808320909101929092556001600160a01b0386168152600f90915260409020805480611f8357611f836131d9565b80612051816130df565b915050611f04565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611609908590612468565b610b6782826040518060200160405280600081525061253a565b816001600160a01b0316836001600160a01b0316141561212f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610931565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6121a7848484611b82565b6121b38484848461256d565b6116095760405162461bcd60e51b8152600401610931906131ef565b60606121da826119aa565b61223e5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610931565b600061225560408051602081019091526000815290565b9050600081511161227557604051806020016040528060008152506122a0565b8061227f8461266b565b60405160200161229092919061317b565b6040516020818303038152906040525b9392505050565b6001600160a01b038316158015906122c757506001600160a01b03821615155b15610a675760016122d784610dc2565b6122e191906131aa565b6122ee576122ee83611dbf565b6122f782610dc2565b61234757600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0384161790555b6123518382611ee9565b6001600160a01b038083166000908152600f60209081526040808320805460018101825581855292842090920185905592861682529082902091517fc5924cfdebd60744aa1d44883cfef5b2bab40fa00f59f61cb3464b281f90bd27926115bf9285928792899291600d90613281565b60006123cc82610c9e565b90506123da816000846122a7565b6123e56000836119c7565b6001600160a01b038116600090815260036020526040812080546001929061240e9084906131aa565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006124bd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127699092919063ffffffff16565b805190915015610a6757808060200190518101906124db9190613310565b610a675760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610931565b6125448383612778565b612551600084848461256d565b610a675760405162461bcd60e51b8152600401610931906131ef565b60006001600160a01b0384163b1561266057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906125b190339089908890889060040161332d565b6020604051808303816000875af19250505080156125ec575060408051601f3d908101601f191682019092526125e99181019061336a565b60015b612646573d80801561261a576040519150601f19603f3d011682016040523d82523d6000602084013e61261f565b606091505b50805161263e5760405162461bcd60e51b8152600401610931906131ef565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117d5565b506001949350505050565b60608161268f5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156126b957806126a3816130df565b91506126b29050600a8361339d565b9150612693565b60008167ffffffffffffffff8111156126d4576126d4612be4565b6040519080825280601f01601f1916602001820160405280156126fe576020820181803683370190505b5090505b84156117d5576127136001836131aa565b9150612720600a866133b1565b61272b9060306131c1565b60f81b818381518110612740576127406130b3565b60200101906001600160f81b031916908160001a905350612762600a8661339d565b9450612702565b60606117d584846000856128b7565b6001600160a01b0382166127ce5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610931565b6127d7816119aa565b156128245760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610931565b612830600083836122a7565b6001600160a01b03821660009081526003602052604081208054600192906128599084906131c1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060824710156129185760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610931565b843b6129665760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610931565b600080866001600160a01b0316858760405161298291906133c5565b60006040518083038185875af1925050503d80600081146129bf576040519150601f19603f3d011682016040523d82523d6000602084013e6129c4565b606091505b50915091506129d48282866129df565b979650505050505050565b606083156129ee5750816122a0565b8251156129fe5782518084602001fd5b8160405162461bcd60e51b81526004016109319190612b72565b828054612a2490613043565b90600052602060002090601f016020900481019282612a465760008555612a8c565b82601f10612a5f57805160ff1916838001178555612a8c565b82800160010185558215612a8c579182015b82811115612a8c578251825591602001919060010190612a71565b50612a98929150612ad2565b5090565b508054612aa890613043565b6000825580601f10612ab8575050565b601f01602090049060005260206000209081019061197d91905b5b80821115612a985760008155600101612ad3565b6001600160e01b03198116811461197d57600080fd5b600060208284031215612b0f57600080fd5b81356122a081612ae7565b60005b83811015612b35578181015183820152602001612b1d565b838111156116095750506000910152565b60008151808452612b5e816020860160208601612b1a565b601f01601f19169290920160200192915050565b6020815260006122a06020830184612b46565b600060208284031215612b9757600080fd5b5035919050565b80356001600160a01b0381168114612bb557600080fd5b919050565b60008060408385031215612bcd57600080fd5b612bd683612b9e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c2357612c23612be4565b604052919050565b600082601f830112612c3c57600080fd5b8135602067ffffffffffffffff821115612c5857612c58612be4565b8160051b612c67828201612bfa565b9283528481018201928281019087851115612c8157600080fd5b83870192505b848310156129d457612c9883612b9e565b82529183019190830190612c87565b803563ffffffff81168114612bb557600080fd5b60008060408385031215612cce57600080fd5b823567ffffffffffffffff811115612ce557600080fd5b612cf185828601612c2b565b925050612d0060208401612ca7565b90509250929050565b600067ffffffffffffffff831115612d2357612d23612be4565b612d36601f8401601f1916602001612bfa565b9050828152838383011115612d4a57600080fd5b828260208301376000602084830101529392505050565b600082601f830112612d7257600080fd5b6122a083833560208501612d09565b60008060408385031215612d9457600080fd5b82359150602083013567ffffffffffffffff811115612db257600080fd5b612dbe85828601612d61565b9150509250929050565b600080600060608486031215612ddd57600080fd5b612de684612b9e565b9250612df460208501612b9e565b9150604084013590509250925092565b600060208284031215612e1657600080fd5b6122a082612b9e565b6020808252825182820181905260009190848201906040850190845b81811015612e5757835183529284019291840191600101612e3b565b50909695505050505050565b600060208284031215612e7557600080fd5b6122a082612ca7565b801515811461197d57600080fd5b600060208284031215612e9e57600080fd5b81356122a081612e7e565b60008060408385031215612ebc57600080fd5b823567ffffffffffffffff811115612ed357600080fd5b612edf85828601612c2b565b9250506020830135612ef081612e7e565b809150509250929050565b600060208284031215612f0d57600080fd5b813567ffffffffffffffff811115612f2457600080fd5b6117d584828501612d61565b60008060408385031215612f4357600080fd5b612f4c83612b9e565b91506020830135612ef081612e7e565b60008060008060808587031215612f7257600080fd5b612f7b85612b9e565b9350612f8960208601612b9e565b925060408501359150606085013567ffffffffffffffff811115612fac57600080fd5b8501601f81018713612fbd57600080fd5b612fcc87823560208401612d09565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b81811015612e575783516001600160a01b031683529284019291840191600101612ff4565b6000806040838503121561302c57600080fd5b61303583612b9e565b9150612d0060208401612b9e565b600181811c9082168061305757607f821691505b6020821081141561307857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156130f3576130f36130c9565b5060010190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008161315a5761315a6130c9565b506000190190565b60006020828403121561317457600080fd5b5051919050565b6000835161318d818460208801612b1a565b8351908301906131a1818360208801612b1a565b01949350505050565b6000828210156131bc576131bc6130c9565b500390565b600082198211156131d4576131d46130c9565b500190565b634e487b7160e01b600052603160045260246000fd5b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000815480845260208085019450836000528060002060005b838110156132765781548752958201956001918201910161325a565b509495945050505050565b8681526000602060018060a01b0380891682850152808816604085015260c060608501526132b260c0850188613241565b84810360808601526132c48188613241565b85810360a0870152865480825260008881528581209350918501915b818110156132fe5783548516835260019384019392860192016132e0565b50909c9b505050505050505050505050565b60006020828403121561332257600080fd5b81516122a081612e7e565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061336090830184612b46565b9695505050505050565b60006020828403121561337c57600080fd5b81516122a081612ae7565b634e487b7160e01b600052601260045260246000fd5b6000826133ac576133ac613387565b500490565b6000826133c0576133c0613387565b500690565b600082516133d7818460208701612b1a565b919091019291505056fea2646970667358221220c357f6f6c66819f4b871ff55f8720037265555a8f3fb56b061c85026779e90a964736f6c634300080b003368747470733a2f2f7777772e617777726174732e636f6d2f64656661756c742d6572633732312d746f6b656e2d6d657461646174612e6a736f6e68747470733a2f2f617777726174732e636f6d2f6f70656e7365612d6d657461646174612e6a736f6e",
}

// RatABI is the input ABI used to generate the binding from.
// Deprecated: Use RatMetaData.ABI instead.
var RatABI = RatMetaData.ABI

// RatBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RatMetaData.Bin instead.
var RatBin = RatMetaData.Bin

// DeployRat deploys a new Ethereum contract, binding an instance of Rat to it.
func DeployRat(auth *bind.TransactOpts, backend bind.ContractBackend, initContractURI string, _defaultTokenURI string, _erc20 common.Address, baseId *big.Int, _maxTokens uint32, _defaultMaxTokensPerWallet uint32, _cost *big.Int, name string, symbol string) (common.Address, *types.Transaction, *Rat, error) {
	parsed, err := RatMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RatBin), backend, initContractURI, _defaultTokenURI, _erc20, baseId, _maxTokens, _defaultMaxTokensPerWallet, _cost, name, symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Rat{RatCaller: RatCaller{contract: contract}, RatTransactor: RatTransactor{contract: contract}, RatFilterer: RatFilterer{contract: contract}}, nil
}

// Rat is an auto generated Go binding around an Ethereum contract.
type Rat struct {
	RatCaller     // Read-only binding to the contract
	RatTransactor // Write-only binding to the contract
	RatFilterer   // Log filterer for contract events
}

// RatCaller is an auto generated read-only Go binding around an Ethereum contract.
type RatCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RatTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RatTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RatFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RatFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RatSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RatSession struct {
	Contract     *Rat              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RatCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RatCallerSession struct {
	Contract *RatCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// RatTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RatTransactorSession struct {
	Contract     *RatTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RatRaw is an auto generated low-level Go binding around an Ethereum contract.
type RatRaw struct {
	Contract *Rat // Generic contract binding to access the raw methods on
}

// RatCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RatCallerRaw struct {
	Contract *RatCaller // Generic read-only contract binding to access the raw methods on
}

// RatTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RatTransactorRaw struct {
	Contract *RatTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRat creates a new instance of Rat, bound to a specific deployed contract.
func NewRat(address common.Address, backend bind.ContractBackend) (*Rat, error) {
	contract, err := bindRat(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Rat{RatCaller: RatCaller{contract: contract}, RatTransactor: RatTransactor{contract: contract}, RatFilterer: RatFilterer{contract: contract}}, nil
}

// NewRatCaller creates a new read-only instance of Rat, bound to a specific deployed contract.
func NewRatCaller(address common.Address, caller bind.ContractCaller) (*RatCaller, error) {
	contract, err := bindRat(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RatCaller{contract: contract}, nil
}

// NewRatTransactor creates a new write-only instance of Rat, bound to a specific deployed contract.
func NewRatTransactor(address common.Address, transactor bind.ContractTransactor) (*RatTransactor, error) {
	contract, err := bindRat(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RatTransactor{contract: contract}, nil
}

// NewRatFilterer creates a new log filterer instance of Rat, bound to a specific deployed contract.
func NewRatFilterer(address common.Address, filterer bind.ContractFilterer) (*RatFilterer, error) {
	contract, err := bindRat(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RatFilterer{contract: contract}, nil
}

// bindRat binds a generic wrapper to an already deployed contract.
func bindRat(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RatABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Rat *RatRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Rat.Contract.RatCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Rat *RatRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rat.Contract.RatTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Rat *RatRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rat.Contract.RatTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Rat *RatCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Rat.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Rat *RatTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rat.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Rat *RatTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rat.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Rat *RatCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Rat *RatSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Rat.Contract.BalanceOf(&_Rat.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Rat *RatCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Rat.Contract.BalanceOf(&_Rat.CallOpts, owner)
}

// BurnedTokens is a free data retrieval call binding the contract method 0x1c348dd3.
//
// Solidity: function burnedTokens(uint256 ) view returns(uint256)
func (_Rat *RatCaller) BurnedTokens(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "burnedTokens", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BurnedTokens is a free data retrieval call binding the contract method 0x1c348dd3.
//
// Solidity: function burnedTokens(uint256 ) view returns(uint256)
func (_Rat *RatSession) BurnedTokens(arg0 *big.Int) (*big.Int, error) {
	return _Rat.Contract.BurnedTokens(&_Rat.CallOpts, arg0)
}

// BurnedTokens is a free data retrieval call binding the contract method 0x1c348dd3.
//
// Solidity: function burnedTokens(uint256 ) view returns(uint256)
func (_Rat *RatCallerSession) BurnedTokens(arg0 *big.Int) (*big.Int, error) {
	return _Rat.Contract.BurnedTokens(&_Rat.CallOpts, arg0)
}

// CanMint is a free data retrieval call binding the contract method 0xbeb9716d.
//
// Solidity: function canMint() view returns(bool)
func (_Rat *RatCaller) CanMint(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "canMint")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanMint is a free data retrieval call binding the contract method 0xbeb9716d.
//
// Solidity: function canMint() view returns(bool)
func (_Rat *RatSession) CanMint() (bool, error) {
	return _Rat.Contract.CanMint(&_Rat.CallOpts)
}

// CanMint is a free data retrieval call binding the contract method 0xbeb9716d.
//
// Solidity: function canMint() view returns(bool)
func (_Rat *RatCallerSession) CanMint() (bool, error) {
	return _Rat.Contract.CanMint(&_Rat.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_Rat *RatCaller) ContractURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "contractURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_Rat *RatSession) ContractURI() (string, error) {
	return _Rat.Contract.ContractURI(&_Rat.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_Rat *RatCallerSession) ContractURI() (string, error) {
	return _Rat.Contract.ContractURI(&_Rat.CallOpts)
}

// Cost is a free data retrieval call binding the contract method 0x13faede6.
//
// Solidity: function cost() view returns(uint256)
func (_Rat *RatCaller) Cost(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "cost")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Cost is a free data retrieval call binding the contract method 0x13faede6.
//
// Solidity: function cost() view returns(uint256)
func (_Rat *RatSession) Cost() (*big.Int, error) {
	return _Rat.Contract.Cost(&_Rat.CallOpts)
}

// Cost is a free data retrieval call binding the contract method 0x13faede6.
//
// Solidity: function cost() view returns(uint256)
func (_Rat *RatCallerSession) Cost() (*big.Int, error) {
	return _Rat.Contract.Cost(&_Rat.CallOpts)
}

// DefaultMaxTokensPerWallet is a free data retrieval call binding the contract method 0xc3fcbbe3.
//
// Solidity: function defaultMaxTokensPerWallet() view returns(uint32)
func (_Rat *RatCaller) DefaultMaxTokensPerWallet(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "defaultMaxTokensPerWallet")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// DefaultMaxTokensPerWallet is a free data retrieval call binding the contract method 0xc3fcbbe3.
//
// Solidity: function defaultMaxTokensPerWallet() view returns(uint32)
func (_Rat *RatSession) DefaultMaxTokensPerWallet() (uint32, error) {
	return _Rat.Contract.DefaultMaxTokensPerWallet(&_Rat.CallOpts)
}

// DefaultMaxTokensPerWallet is a free data retrieval call binding the contract method 0xc3fcbbe3.
//
// Solidity: function defaultMaxTokensPerWallet() view returns(uint32)
func (_Rat *RatCallerSession) DefaultMaxTokensPerWallet() (uint32, error) {
	return _Rat.Contract.DefaultMaxTokensPerWallet(&_Rat.CallOpts)
}

// DefaultTokenURI is a free data retrieval call binding the contract method 0x963bfe12.
//
// Solidity: function defaultTokenURI() view returns(string)
func (_Rat *RatCaller) DefaultTokenURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "defaultTokenURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// DefaultTokenURI is a free data retrieval call binding the contract method 0x963bfe12.
//
// Solidity: function defaultTokenURI() view returns(string)
func (_Rat *RatSession) DefaultTokenURI() (string, error) {
	return _Rat.Contract.DefaultTokenURI(&_Rat.CallOpts)
}

// DefaultTokenURI is a free data retrieval call binding the contract method 0x963bfe12.
//
// Solidity: function defaultTokenURI() view returns(string)
func (_Rat *RatCallerSession) DefaultTokenURI() (string, error) {
	return _Rat.Contract.DefaultTokenURI(&_Rat.CallOpts)
}

// Erc20 is a free data retrieval call binding the contract method 0x785e9e86.
//
// Solidity: function erc20() view returns(address)
func (_Rat *RatCaller) Erc20(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "erc20")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Erc20 is a free data retrieval call binding the contract method 0x785e9e86.
//
// Solidity: function erc20() view returns(address)
func (_Rat *RatSession) Erc20() (common.Address, error) {
	return _Rat.Contract.Erc20(&_Rat.CallOpts)
}

// Erc20 is a free data retrieval call binding the contract method 0x785e9e86.
//
// Solidity: function erc20() view returns(address)
func (_Rat *RatCallerSession) Erc20() (common.Address, error) {
	return _Rat.Contract.Erc20(&_Rat.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Rat *RatCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Rat *RatSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Rat.Contract.GetApproved(&_Rat.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Rat *RatCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Rat.Contract.GetApproved(&_Rat.CallOpts, tokenId)
}

// GetBurnedTokens is a free data retrieval call binding the contract method 0xc3f4f54f.
//
// Solidity: function getBurnedTokens() view returns(uint256[])
func (_Rat *RatCaller) GetBurnedTokens(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "getBurnedTokens")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetBurnedTokens is a free data retrieval call binding the contract method 0xc3f4f54f.
//
// Solidity: function getBurnedTokens() view returns(uint256[])
func (_Rat *RatSession) GetBurnedTokens() ([]*big.Int, error) {
	return _Rat.Contract.GetBurnedTokens(&_Rat.CallOpts)
}

// GetBurnedTokens is a free data retrieval call binding the contract method 0xc3f4f54f.
//
// Solidity: function getBurnedTokens() view returns(uint256[])
func (_Rat *RatCallerSession) GetBurnedTokens() ([]*big.Int, error) {
	return _Rat.Contract.GetBurnedTokens(&_Rat.CallOpts)
}

// GetBurnedTokensByOwner is a free data retrieval call binding the contract method 0xcafee7ee.
//
// Solidity: function getBurnedTokensByOwner(address user) view returns(uint256[])
func (_Rat *RatCaller) GetBurnedTokensByOwner(opts *bind.CallOpts, user common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "getBurnedTokensByOwner", user)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetBurnedTokensByOwner is a free data retrieval call binding the contract method 0xcafee7ee.
//
// Solidity: function getBurnedTokensByOwner(address user) view returns(uint256[])
func (_Rat *RatSession) GetBurnedTokensByOwner(user common.Address) ([]*big.Int, error) {
	return _Rat.Contract.GetBurnedTokensByOwner(&_Rat.CallOpts, user)
}

// GetBurnedTokensByOwner is a free data retrieval call binding the contract method 0xcafee7ee.
//
// Solidity: function getBurnedTokensByOwner(address user) view returns(uint256[])
func (_Rat *RatCallerSession) GetBurnedTokensByOwner(user common.Address) ([]*big.Int, error) {
	return _Rat.Contract.GetBurnedTokensByOwner(&_Rat.CallOpts, user)
}

// GetTokenOwners is a free data retrieval call binding the contract method 0xd1b02ba7.
//
// Solidity: function getTokenOwners() view returns(address[])
func (_Rat *RatCaller) GetTokenOwners(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "getTokenOwners")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetTokenOwners is a free data retrieval call binding the contract method 0xd1b02ba7.
//
// Solidity: function getTokenOwners() view returns(address[])
func (_Rat *RatSession) GetTokenOwners() ([]common.Address, error) {
	return _Rat.Contract.GetTokenOwners(&_Rat.CallOpts)
}

// GetTokenOwners is a free data retrieval call binding the contract method 0xd1b02ba7.
//
// Solidity: function getTokenOwners() view returns(address[])
func (_Rat *RatCallerSession) GetTokenOwners() ([]common.Address, error) {
	return _Rat.Contract.GetTokenOwners(&_Rat.CallOpts)
}

// GetTokensByOwner is a free data retrieval call binding the contract method 0x40398d67.
//
// Solidity: function getTokensByOwner(address user) view returns(uint256[])
func (_Rat *RatCaller) GetTokensByOwner(opts *bind.CallOpts, user common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "getTokensByOwner", user)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetTokensByOwner is a free data retrieval call binding the contract method 0x40398d67.
//
// Solidity: function getTokensByOwner(address user) view returns(uint256[])
func (_Rat *RatSession) GetTokensByOwner(user common.Address) ([]*big.Int, error) {
	return _Rat.Contract.GetTokensByOwner(&_Rat.CallOpts, user)
}

// GetTokensByOwner is a free data retrieval call binding the contract method 0x40398d67.
//
// Solidity: function getTokensByOwner(address user) view returns(uint256[])
func (_Rat *RatCallerSession) GetTokensByOwner(user common.Address) ([]*big.Int, error) {
	return _Rat.Contract.GetTokensByOwner(&_Rat.CallOpts, user)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Rat *RatCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Rat *RatSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Rat.Contract.IsApprovedForAll(&_Rat.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Rat *RatCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Rat.Contract.IsApprovedForAll(&_Rat.CallOpts, owner, operator)
}

// MaxTokens is a free data retrieval call binding the contract method 0xe8315742.
//
// Solidity: function maxTokens() view returns(uint32)
func (_Rat *RatCaller) MaxTokens(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "maxTokens")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MaxTokens is a free data retrieval call binding the contract method 0xe8315742.
//
// Solidity: function maxTokens() view returns(uint32)
func (_Rat *RatSession) MaxTokens() (uint32, error) {
	return _Rat.Contract.MaxTokens(&_Rat.CallOpts)
}

// MaxTokens is a free data retrieval call binding the contract method 0xe8315742.
//
// Solidity: function maxTokens() view returns(uint32)
func (_Rat *RatCallerSession) MaxTokens() (uint32, error) {
	return _Rat.Contract.MaxTokens(&_Rat.CallOpts)
}

// MaxTokensPerWallet is a free data retrieval call binding the contract method 0xcd634be0.
//
// Solidity: function maxTokensPerWallet(address ) view returns(uint32)
func (_Rat *RatCaller) MaxTokensPerWallet(opts *bind.CallOpts, arg0 common.Address) (uint32, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "maxTokensPerWallet", arg0)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MaxTokensPerWallet is a free data retrieval call binding the contract method 0xcd634be0.
//
// Solidity: function maxTokensPerWallet(address ) view returns(uint32)
func (_Rat *RatSession) MaxTokensPerWallet(arg0 common.Address) (uint32, error) {
	return _Rat.Contract.MaxTokensPerWallet(&_Rat.CallOpts, arg0)
}

// MaxTokensPerWallet is a free data retrieval call binding the contract method 0xcd634be0.
//
// Solidity: function maxTokensPerWallet(address ) view returns(uint32)
func (_Rat *RatCallerSession) MaxTokensPerWallet(arg0 common.Address) (uint32, error) {
	return _Rat.Contract.MaxTokensPerWallet(&_Rat.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Rat *RatCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Rat *RatSession) Name() (string, error) {
	return _Rat.Contract.Name(&_Rat.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Rat *RatCallerSession) Name() (string, error) {
	return _Rat.Contract.Name(&_Rat.CallOpts)
}

// NumTokens is a free data retrieval call binding the contract method 0x8e499bcf.
//
// Solidity: function numTokens() view returns(uint256)
func (_Rat *RatCaller) NumTokens(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "numTokens")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumTokens is a free data retrieval call binding the contract method 0x8e499bcf.
//
// Solidity: function numTokens() view returns(uint256)
func (_Rat *RatSession) NumTokens() (*big.Int, error) {
	return _Rat.Contract.NumTokens(&_Rat.CallOpts)
}

// NumTokens is a free data retrieval call binding the contract method 0x8e499bcf.
//
// Solidity: function numTokens() view returns(uint256)
func (_Rat *RatCallerSession) NumTokens() (*big.Int, error) {
	return _Rat.Contract.NumTokens(&_Rat.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Rat *RatCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Rat *RatSession) Owner() (common.Address, error) {
	return _Rat.Contract.Owner(&_Rat.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Rat *RatCallerSession) Owner() (common.Address, error) {
	return _Rat.Contract.Owner(&_Rat.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Rat *RatCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Rat *RatSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Rat.Contract.OwnerOf(&_Rat.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Rat *RatCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Rat.Contract.OwnerOf(&_Rat.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Rat *RatCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Rat *RatSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Rat.Contract.SupportsInterface(&_Rat.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Rat *RatCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Rat.Contract.SupportsInterface(&_Rat.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Rat *RatCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Rat *RatSession) Symbol() (string, error) {
	return _Rat.Contract.Symbol(&_Rat.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Rat *RatCallerSession) Symbol() (string, error) {
	return _Rat.Contract.Symbol(&_Rat.CallOpts)
}

// TokenOwners is a free data retrieval call binding the contract method 0xf8a14f46.
//
// Solidity: function tokenOwners(uint256 ) view returns(address)
func (_Rat *RatCaller) TokenOwners(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "tokenOwners", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenOwners is a free data retrieval call binding the contract method 0xf8a14f46.
//
// Solidity: function tokenOwners(uint256 ) view returns(address)
func (_Rat *RatSession) TokenOwners(arg0 *big.Int) (common.Address, error) {
	return _Rat.Contract.TokenOwners(&_Rat.CallOpts, arg0)
}

// TokenOwners is a free data retrieval call binding the contract method 0xf8a14f46.
//
// Solidity: function tokenOwners(uint256 ) view returns(address)
func (_Rat *RatCallerSession) TokenOwners(arg0 *big.Int) (common.Address, error) {
	return _Rat.Contract.TokenOwners(&_Rat.CallOpts, arg0)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Rat *RatCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Rat *RatSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Rat.Contract.TokenURI(&_Rat.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Rat *RatCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Rat.Contract.TokenURI(&_Rat.CallOpts, tokenId)
}

// WalletBans is a free data retrieval call binding the contract method 0xeed670d7.
//
// Solidity: function walletBans(address ) view returns(bool)
func (_Rat *RatCaller) WalletBans(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Rat.contract.Call(opts, &out, "walletBans", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WalletBans is a free data retrieval call binding the contract method 0xeed670d7.
//
// Solidity: function walletBans(address ) view returns(bool)
func (_Rat *RatSession) WalletBans(arg0 common.Address) (bool, error) {
	return _Rat.Contract.WalletBans(&_Rat.CallOpts, arg0)
}

// WalletBans is a free data retrieval call binding the contract method 0xeed670d7.
//
// Solidity: function walletBans(address ) view returns(bool)
func (_Rat *RatCallerSession) WalletBans(arg0 common.Address) (bool, error) {
	return _Rat.Contract.WalletBans(&_Rat.CallOpts, arg0)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Rat *RatTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Rat *RatSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Rat.Contract.Approve(&_Rat.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Rat *RatTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Rat.Contract.Approve(&_Rat.TransactOpts, to, tokenId)
}

// BurnToken is a paid mutator transaction binding the contract method 0x7b47ec1a.
//
// Solidity: function burnToken(uint256 id) returns()
func (_Rat *RatTransactor) BurnToken(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "burnToken", id)
}

// BurnToken is a paid mutator transaction binding the contract method 0x7b47ec1a.
//
// Solidity: function burnToken(uint256 id) returns()
func (_Rat *RatSession) BurnToken(id *big.Int) (*types.Transaction, error) {
	return _Rat.Contract.BurnToken(&_Rat.TransactOpts, id)
}

// BurnToken is a paid mutator transaction binding the contract method 0x7b47ec1a.
//
// Solidity: function burnToken(uint256 id) returns()
func (_Rat *RatTransactorSession) BurnToken(id *big.Int) (*types.Transaction, error) {
	return _Rat.Contract.BurnToken(&_Rat.TransactOpts, id)
}

// CreateToken is a paid mutator transaction binding the contract method 0x9cbf9e36.
//
// Solidity: function createToken() payable returns()
func (_Rat *RatTransactor) CreateToken(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "createToken")
}

// CreateToken is a paid mutator transaction binding the contract method 0x9cbf9e36.
//
// Solidity: function createToken() payable returns()
func (_Rat *RatSession) CreateToken() (*types.Transaction, error) {
	return _Rat.Contract.CreateToken(&_Rat.TransactOpts)
}

// CreateToken is a paid mutator transaction binding the contract method 0x9cbf9e36.
//
// Solidity: function createToken() payable returns()
func (_Rat *RatTransactorSession) CreateToken() (*types.Transaction, error) {
	return _Rat.Contract.CreateToken(&_Rat.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Rat *RatTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Rat *RatSession) RenounceOwnership() (*types.Transaction, error) {
	return _Rat.Contract.RenounceOwnership(&_Rat.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Rat *RatTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Rat.Contract.RenounceOwnership(&_Rat.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Rat *RatTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Rat *RatSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Rat.Contract.SafeTransferFrom(&_Rat.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Rat *RatTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Rat.Contract.SafeTransferFrom(&_Rat.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Rat *RatTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Rat *RatSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Rat.Contract.SafeTransferFrom0(&_Rat.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Rat *RatTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Rat.Contract.SafeTransferFrom0(&_Rat.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Rat *RatTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Rat *RatSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Rat.Contract.SetApprovalForAll(&_Rat.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Rat *RatTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Rat.Contract.SetApprovalForAll(&_Rat.TransactOpts, operator, approved)
}

// SetContractURI is a paid mutator transaction binding the contract method 0x938e3d7b.
//
// Solidity: function setContractURI(string newContractURI) returns()
func (_Rat *RatTransactor) SetContractURI(opts *bind.TransactOpts, newContractURI string) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "setContractURI", newContractURI)
}

// SetContractURI is a paid mutator transaction binding the contract method 0x938e3d7b.
//
// Solidity: function setContractURI(string newContractURI) returns()
func (_Rat *RatSession) SetContractURI(newContractURI string) (*types.Transaction, error) {
	return _Rat.Contract.SetContractURI(&_Rat.TransactOpts, newContractURI)
}

// SetContractURI is a paid mutator transaction binding the contract method 0x938e3d7b.
//
// Solidity: function setContractURI(string newContractURI) returns()
func (_Rat *RatTransactorSession) SetContractURI(newContractURI string) (*types.Transaction, error) {
	return _Rat.Contract.SetContractURI(&_Rat.TransactOpts, newContractURI)
}

// SetCost is a paid mutator transaction binding the contract method 0x44a0d68a.
//
// Solidity: function setCost(uint256 newCost) returns()
func (_Rat *RatTransactor) SetCost(opts *bind.TransactOpts, newCost *big.Int) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "setCost", newCost)
}

// SetCost is a paid mutator transaction binding the contract method 0x44a0d68a.
//
// Solidity: function setCost(uint256 newCost) returns()
func (_Rat *RatSession) SetCost(newCost *big.Int) (*types.Transaction, error) {
	return _Rat.Contract.SetCost(&_Rat.TransactOpts, newCost)
}

// SetCost is a paid mutator transaction binding the contract method 0x44a0d68a.
//
// Solidity: function setCost(uint256 newCost) returns()
func (_Rat *RatTransactorSession) SetCost(newCost *big.Int) (*types.Transaction, error) {
	return _Rat.Contract.SetCost(&_Rat.TransactOpts, newCost)
}

// SetDefaultMaxTokensPerWallet is a paid mutator transaction binding the contract method 0x6558c521.
//
// Solidity: function setDefaultMaxTokensPerWallet(uint32 _defaultMaxTokensPerWallet) returns()
func (_Rat *RatTransactor) SetDefaultMaxTokensPerWallet(opts *bind.TransactOpts, _defaultMaxTokensPerWallet uint32) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "setDefaultMaxTokensPerWallet", _defaultMaxTokensPerWallet)
}

// SetDefaultMaxTokensPerWallet is a paid mutator transaction binding the contract method 0x6558c521.
//
// Solidity: function setDefaultMaxTokensPerWallet(uint32 _defaultMaxTokensPerWallet) returns()
func (_Rat *RatSession) SetDefaultMaxTokensPerWallet(_defaultMaxTokensPerWallet uint32) (*types.Transaction, error) {
	return _Rat.Contract.SetDefaultMaxTokensPerWallet(&_Rat.TransactOpts, _defaultMaxTokensPerWallet)
}

// SetDefaultMaxTokensPerWallet is a paid mutator transaction binding the contract method 0x6558c521.
//
// Solidity: function setDefaultMaxTokensPerWallet(uint32 _defaultMaxTokensPerWallet) returns()
func (_Rat *RatTransactorSession) SetDefaultMaxTokensPerWallet(_defaultMaxTokensPerWallet uint32) (*types.Transaction, error) {
	return _Rat.Contract.SetDefaultMaxTokensPerWallet(&_Rat.TransactOpts, _defaultMaxTokensPerWallet)
}

// SetERC20Address is a paid mutator transaction binding the contract method 0x41bec0d2.
//
// Solidity: function setERC20Address(address newAddr) returns()
func (_Rat *RatTransactor) SetERC20Address(opts *bind.TransactOpts, newAddr common.Address) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "setERC20Address", newAddr)
}

// SetERC20Address is a paid mutator transaction binding the contract method 0x41bec0d2.
//
// Solidity: function setERC20Address(address newAddr) returns()
func (_Rat *RatSession) SetERC20Address(newAddr common.Address) (*types.Transaction, error) {
	return _Rat.Contract.SetERC20Address(&_Rat.TransactOpts, newAddr)
}

// SetERC20Address is a paid mutator transaction binding the contract method 0x41bec0d2.
//
// Solidity: function setERC20Address(address newAddr) returns()
func (_Rat *RatTransactorSession) SetERC20Address(newAddr common.Address) (*types.Transaction, error) {
	return _Rat.Contract.SetERC20Address(&_Rat.TransactOpts, newAddr)
}

// SetMaxTokens is a paid mutator transaction binding the contract method 0x6a92072b.
//
// Solidity: function setMaxTokens(uint32 newMax) returns()
func (_Rat *RatTransactor) SetMaxTokens(opts *bind.TransactOpts, newMax uint32) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "setMaxTokens", newMax)
}

// SetMaxTokens is a paid mutator transaction binding the contract method 0x6a92072b.
//
// Solidity: function setMaxTokens(uint32 newMax) returns()
func (_Rat *RatSession) SetMaxTokens(newMax uint32) (*types.Transaction, error) {
	return _Rat.Contract.SetMaxTokens(&_Rat.TransactOpts, newMax)
}

// SetMaxTokens is a paid mutator transaction binding the contract method 0x6a92072b.
//
// Solidity: function setMaxTokens(uint32 newMax) returns()
func (_Rat *RatTransactorSession) SetMaxTokens(newMax uint32) (*types.Transaction, error) {
	return _Rat.Contract.SetMaxTokens(&_Rat.TransactOpts, newMax)
}

// SetMaxTokensForWallets is a paid mutator transaction binding the contract method 0x09bc18ad.
//
// Solidity: function setMaxTokensForWallets(address[] wallets, uint32 max) returns()
func (_Rat *RatTransactor) SetMaxTokensForWallets(opts *bind.TransactOpts, wallets []common.Address, max uint32) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "setMaxTokensForWallets", wallets, max)
}

// SetMaxTokensForWallets is a paid mutator transaction binding the contract method 0x09bc18ad.
//
// Solidity: function setMaxTokensForWallets(address[] wallets, uint32 max) returns()
func (_Rat *RatSession) SetMaxTokensForWallets(wallets []common.Address, max uint32) (*types.Transaction, error) {
	return _Rat.Contract.SetMaxTokensForWallets(&_Rat.TransactOpts, wallets, max)
}

// SetMaxTokensForWallets is a paid mutator transaction binding the contract method 0x09bc18ad.
//
// Solidity: function setMaxTokensForWallets(address[] wallets, uint32 max) returns()
func (_Rat *RatTransactorSession) SetMaxTokensForWallets(wallets []common.Address, max uint32) (*types.Transaction, error) {
	return _Rat.Contract.SetMaxTokensForWallets(&_Rat.TransactOpts, wallets, max)
}

// SetMintingStatus is a paid mutator transaction binding the contract method 0x7420aa36.
//
// Solidity: function setMintingStatus(bool status) returns()
func (_Rat *RatTransactor) SetMintingStatus(opts *bind.TransactOpts, status bool) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "setMintingStatus", status)
}

// SetMintingStatus is a paid mutator transaction binding the contract method 0x7420aa36.
//
// Solidity: function setMintingStatus(bool status) returns()
func (_Rat *RatSession) SetMintingStatus(status bool) (*types.Transaction, error) {
	return _Rat.Contract.SetMintingStatus(&_Rat.TransactOpts, status)
}

// SetMintingStatus is a paid mutator transaction binding the contract method 0x7420aa36.
//
// Solidity: function setMintingStatus(bool status) returns()
func (_Rat *RatTransactorSession) SetMintingStatus(status bool) (*types.Transaction, error) {
	return _Rat.Contract.SetMintingStatus(&_Rat.TransactOpts, status)
}

// SetWalletBan is a paid mutator transaction binding the contract method 0x7ece73a3.
//
// Solidity: function setWalletBan(address[] wallets, bool banned) returns()
func (_Rat *RatTransactor) SetWalletBan(opts *bind.TransactOpts, wallets []common.Address, banned bool) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "setWalletBan", wallets, banned)
}

// SetWalletBan is a paid mutator transaction binding the contract method 0x7ece73a3.
//
// Solidity: function setWalletBan(address[] wallets, bool banned) returns()
func (_Rat *RatSession) SetWalletBan(wallets []common.Address, banned bool) (*types.Transaction, error) {
	return _Rat.Contract.SetWalletBan(&_Rat.TransactOpts, wallets, banned)
}

// SetWalletBan is a paid mutator transaction binding the contract method 0x7ece73a3.
//
// Solidity: function setWalletBan(address[] wallets, bool banned) returns()
func (_Rat *RatTransactorSession) SetWalletBan(wallets []common.Address, banned bool) (*types.Transaction, error) {
	return _Rat.Contract.SetWalletBan(&_Rat.TransactOpts, wallets, banned)
}

// StoreAsset is a paid mutator transaction binding the contract method 0x22ad22a7.
//
// Solidity: function storeAsset(uint256 id, string uri) returns()
func (_Rat *RatTransactor) StoreAsset(opts *bind.TransactOpts, id *big.Int, uri string) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "storeAsset", id, uri)
}

// StoreAsset is a paid mutator transaction binding the contract method 0x22ad22a7.
//
// Solidity: function storeAsset(uint256 id, string uri) returns()
func (_Rat *RatSession) StoreAsset(id *big.Int, uri string) (*types.Transaction, error) {
	return _Rat.Contract.StoreAsset(&_Rat.TransactOpts, id, uri)
}

// StoreAsset is a paid mutator transaction binding the contract method 0x22ad22a7.
//
// Solidity: function storeAsset(uint256 id, string uri) returns()
func (_Rat *RatTransactorSession) StoreAsset(id *big.Int, uri string) (*types.Transaction, error) {
	return _Rat.Contract.StoreAsset(&_Rat.TransactOpts, id, uri)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Rat *RatTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Rat *RatSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Rat.Contract.TransferFrom(&_Rat.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Rat *RatTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Rat.Contract.TransferFrom(&_Rat.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Rat *RatTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Rat.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Rat *RatSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Rat.Contract.TransferOwnership(&_Rat.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Rat *RatTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Rat.Contract.TransferOwnership(&_Rat.TransactOpts, newOwner)
}

// RatApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Rat contract.
type RatApprovalIterator struct {
	Event *RatApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RatApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RatApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RatApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RatApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RatApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RatApproval represents a Approval event raised by the Rat contract.
type RatApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Rat *RatFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*RatApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Rat.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &RatApprovalIterator{contract: _Rat.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Rat *RatFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *RatApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Rat.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RatApproval)
				if err := _Rat.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Rat *RatFilterer) ParseApproval(log types.Log) (*RatApproval, error) {
	event := new(RatApproval)
	if err := _Rat.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RatApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Rat contract.
type RatApprovalForAllIterator struct {
	Event *RatApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RatApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RatApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RatApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RatApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RatApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RatApprovalForAll represents a ApprovalForAll event raised by the Rat contract.
type RatApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Rat *RatFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*RatApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Rat.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &RatApprovalForAllIterator{contract: _Rat.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Rat *RatFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *RatApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Rat.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RatApprovalForAll)
				if err := _Rat.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Rat *RatFilterer) ParseApprovalForAll(log types.Log) (*RatApprovalForAll, error) {
	event := new(RatApprovalForAll)
	if err := _Rat.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RatOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Rat contract.
type RatOwnershipTransferredIterator struct {
	Event *RatOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RatOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RatOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RatOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RatOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RatOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RatOwnershipTransferred represents a OwnershipTransferred event raised by the Rat contract.
type RatOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Rat *RatFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RatOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Rat.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RatOwnershipTransferredIterator{contract: _Rat.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Rat *RatFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RatOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Rat.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RatOwnershipTransferred)
				if err := _Rat.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Rat *RatFilterer) ParseOwnershipTransferred(log types.Log) (*RatOwnershipTransferred, error) {
	event := new(RatOwnershipTransferred)
	if err := _Rat.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RatTokenBurnedIterator is returned from FilterTokenBurned and is used to iterate over the raw logs and unpacked data for TokenBurned events raised by the Rat contract.
type RatTokenBurnedIterator struct {
	Event *RatTokenBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RatTokenBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RatTokenBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RatTokenBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RatTokenBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RatTokenBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RatTokenBurned represents a TokenBurned event raised by the Rat contract.
type RatTokenBurned struct {
	TokenId    *big.Int
	TokenOwner common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTokenBurned is a free log retrieval operation binding the contract event 0x33631bcd0a4d34a7e2c240ab0753d5adfb7284d8ac89dab6876ec785c0cfa0e6.
//
// Solidity: event TokenBurned(uint256 tokenId, address tokenOwner)
func (_Rat *RatFilterer) FilterTokenBurned(opts *bind.FilterOpts) (*RatTokenBurnedIterator, error) {

	logs, sub, err := _Rat.contract.FilterLogs(opts, "TokenBurned")
	if err != nil {
		return nil, err
	}
	return &RatTokenBurnedIterator{contract: _Rat.contract, event: "TokenBurned", logs: logs, sub: sub}, nil
}

// WatchTokenBurned is a free log subscription operation binding the contract event 0x33631bcd0a4d34a7e2c240ab0753d5adfb7284d8ac89dab6876ec785c0cfa0e6.
//
// Solidity: event TokenBurned(uint256 tokenId, address tokenOwner)
func (_Rat *RatFilterer) WatchTokenBurned(opts *bind.WatchOpts, sink chan<- *RatTokenBurned) (event.Subscription, error) {

	logs, sub, err := _Rat.contract.WatchLogs(opts, "TokenBurned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RatTokenBurned)
				if err := _Rat.contract.UnpackLog(event, "TokenBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenBurned is a log parse operation binding the contract event 0x33631bcd0a4d34a7e2c240ab0753d5adfb7284d8ac89dab6876ec785c0cfa0e6.
//
// Solidity: event TokenBurned(uint256 tokenId, address tokenOwner)
func (_Rat *RatFilterer) ParseTokenBurned(log types.Log) (*RatTokenBurned, error) {
	event := new(RatTokenBurned)
	if err := _Rat.contract.UnpackLog(event, "TokenBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RatTokenMintedIterator is returned from FilterTokenMinted and is used to iterate over the raw logs and unpacked data for TokenMinted events raised by the Rat contract.
type RatTokenMintedIterator struct {
	Event *RatTokenMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RatTokenMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RatTokenMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RatTokenMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RatTokenMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RatTokenMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RatTokenMinted represents a TokenMinted event raised by the Rat contract.
type RatTokenMinted struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTokenMinted is a free log retrieval operation binding the contract event 0xf00d28232b285f24f2e38415deb2ceb31069e70d4505838b3911b4f02058502e.
//
// Solidity: event TokenMinted(uint256 tokenId)
func (_Rat *RatFilterer) FilterTokenMinted(opts *bind.FilterOpts) (*RatTokenMintedIterator, error) {

	logs, sub, err := _Rat.contract.FilterLogs(opts, "TokenMinted")
	if err != nil {
		return nil, err
	}
	return &RatTokenMintedIterator{contract: _Rat.contract, event: "TokenMinted", logs: logs, sub: sub}, nil
}

// WatchTokenMinted is a free log subscription operation binding the contract event 0xf00d28232b285f24f2e38415deb2ceb31069e70d4505838b3911b4f02058502e.
//
// Solidity: event TokenMinted(uint256 tokenId)
func (_Rat *RatFilterer) WatchTokenMinted(opts *bind.WatchOpts, sink chan<- *RatTokenMinted) (event.Subscription, error) {

	logs, sub, err := _Rat.contract.WatchLogs(opts, "TokenMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RatTokenMinted)
				if err := _Rat.contract.UnpackLog(event, "TokenMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenMinted is a log parse operation binding the contract event 0xf00d28232b285f24f2e38415deb2ceb31069e70d4505838b3911b4f02058502e.
//
// Solidity: event TokenMinted(uint256 tokenId)
func (_Rat *RatFilterer) ParseTokenMinted(log types.Log) (*RatTokenMinted, error) {
	event := new(RatTokenMinted)
	if err := _Rat.contract.UnpackLog(event, "TokenMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RatTokenTransferredIterator is returned from FilterTokenTransferred and is used to iterate over the raw logs and unpacked data for TokenTransferred events raised by the Rat contract.
type RatTokenTransferredIterator struct {
	Event *RatTokenTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RatTokenTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RatTokenTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RatTokenTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RatTokenTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RatTokenTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RatTokenTransferred represents a TokenTransferred event raised by the Rat contract.
type RatTokenTransferred struct {
	TokenId        *big.Int
	NewOwner       common.Address
	OldOwner       common.Address
	NewOwnerTokens []*big.Int
	OldOwnerTokens []*big.Int
	TokenOwners    []common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTokenTransferred is a free log retrieval operation binding the contract event 0xc5924cfdebd60744aa1d44883cfef5b2bab40fa00f59f61cb3464b281f90bd27.
//
// Solidity: event TokenTransferred(uint256 tokenId, address newOwner, address oldOwner, uint256[] newOwnerTokens, uint256[] oldOwnerTokens, address[] tokenOwners)
func (_Rat *RatFilterer) FilterTokenTransferred(opts *bind.FilterOpts) (*RatTokenTransferredIterator, error) {

	logs, sub, err := _Rat.contract.FilterLogs(opts, "TokenTransferred")
	if err != nil {
		return nil, err
	}
	return &RatTokenTransferredIterator{contract: _Rat.contract, event: "TokenTransferred", logs: logs, sub: sub}, nil
}

// WatchTokenTransferred is a free log subscription operation binding the contract event 0xc5924cfdebd60744aa1d44883cfef5b2bab40fa00f59f61cb3464b281f90bd27.
//
// Solidity: event TokenTransferred(uint256 tokenId, address newOwner, address oldOwner, uint256[] newOwnerTokens, uint256[] oldOwnerTokens, address[] tokenOwners)
func (_Rat *RatFilterer) WatchTokenTransferred(opts *bind.WatchOpts, sink chan<- *RatTokenTransferred) (event.Subscription, error) {

	logs, sub, err := _Rat.contract.WatchLogs(opts, "TokenTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RatTokenTransferred)
				if err := _Rat.contract.UnpackLog(event, "TokenTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenTransferred is a log parse operation binding the contract event 0xc5924cfdebd60744aa1d44883cfef5b2bab40fa00f59f61cb3464b281f90bd27.
//
// Solidity: event TokenTransferred(uint256 tokenId, address newOwner, address oldOwner, uint256[] newOwnerTokens, uint256[] oldOwnerTokens, address[] tokenOwners)
func (_Rat *RatFilterer) ParseTokenTransferred(log types.Log) (*RatTokenTransferred, error) {
	event := new(RatTokenTransferred)
	if err := _Rat.contract.UnpackLog(event, "TokenTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RatTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Rat contract.
type RatTransferIterator struct {
	Event *RatTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RatTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RatTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RatTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RatTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RatTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RatTransfer represents a Transfer event raised by the Rat contract.
type RatTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Rat *RatFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*RatTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Rat.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &RatTransferIterator{contract: _Rat.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Rat *RatFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *RatTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Rat.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RatTransfer)
				if err := _Rat.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Rat *RatFilterer) ParseTransfer(log types.Log) (*RatTransfer, error) {
	event := new(RatTransfer)
	if err := _Rat.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
